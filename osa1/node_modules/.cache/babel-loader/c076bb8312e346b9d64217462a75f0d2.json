{"ast":null,"code":"import _classCallCheck from \"/Users/perttira/Dropbox/Sites/fullstack/osa1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/perttira/Dropbox/Sites/fullstack/osa1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/perttira/Dropbox/Sites/fullstack/osa1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/perttira/Dropbox/Sites/fullstack/osa1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/perttira/Dropbox/Sites/fullstack/osa1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/perttira/Dropbox/Sites/fullstack/osa1/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n/*\n\nconst App = (props) => {\n  const {counter} = props\n  return (\n    <div>{counter.value}</div>\n  )\n}\n\nconst counter = {\n  value: 1\n}\n\nconst renderoi = () => {\n  ReactDOM.render(\n    <App counter={counter} />,\n    document.getElementById('root')\n  )\n}\n\nsetInterval(() => {\n  renderoi()\n  counter.value += 1;\n}, 1000)\n\n*/\n\n/*\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n\n//  React-komponenttien tilaa, eli muuttujaa this.state ei saa päivittää suoraan,\n//  tilan päivitys on tehtävä aina funktion setState avulla.\n//  Metodin kutsuminen päivittää tilan ja aiheuttaa komponentin uuden \n//  renderöinnin (ellei sitä ole estetty myöhemmin esiteltävällä tavalla). \n//  Uudelleenrenderöinnin yhteydessä myös kaikki komponentin sisältämät \n//  alikomponentit renderöidään.\n\n    setInterval(() => {\n      this.setState({ counter: this.state.counter + 1 })\n    }, 1000)\n  }\n  render() {\n    console.log('renderöidään', this.state.counter)\n    return (\n      <div>{this.state.counter}</div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/* TAPAHTUMANKÄSITTELIJÄ \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div>{this.state.counter}</div>\n        <button onClick={() => this.setState({ counter: this.state.counter + 1 })}>\n          plus\n        </button>\n        <button onClick={() => this.setState({ counter: 0 })}>\n          zero\n        </button>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*   METODIEN KÄYTTÖ JA THIS    \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n    this.kasvataYhdella = this.kasvataYhdella.bind(this)\n    this.nollaa = this.nollaa.bind(this)\n  }\n\n  kasvataYhdella() {\n    this.setState({ counter: this.state.counter + 1 })\n  }\n\n  nollaa() {\n    this.setState({ counter: 0 })\n  }\n\n  render() {\n    return (\n      <div>\n        <div>{this.state.counter}</div>\n        <div>\n        <button onClick={this.kasvataYhdella}>\n          plus\n        </button>\n        <button onClick={this.nollaa}>\n          zero\n        </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n\n*/\n\n/*   TILAN VIEMINEN ALIKOMPONENTTIIN   \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n  }\n\n  asetaArvoon = (arvo) => {\n    return () => {\n      this.setState({ counter: arvo })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Display counter={this.state.counter}/>\n        <div>\n          <Button\n            handleClick={this.asetaArvoon(this.state.counter + 1)}\n            text=\"Plus\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.counter - 1)}\n            text=\"Minus\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(0)}\n            text=\"Zero\"\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\n// Voidaan lyhentää muotoon: const Display = ({ counter }) => <div>{counter}</div>\nconst Display = (props) => {\n  return (\n    <div>{props.counter}</div>\n  )\n}\nconst Button = ({ handleClick, text }) => (\n  <button onClick={handleClick}>\n    {text}\n  </button>\n)\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*  MONIMUTKAISEMMAN TILAN PÄIVITTÄMINEN   \n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      vasen: 0,\n      oikea: 0\n    }\n  }\n\n  klikVasen = () => {\n    this.setState({\n      vasen: this.state.vasen + 1\n    })\n  }\n\n  klikOikea = () => {\n    this.setState({\n      oikea: this.state.oikea + 1\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          {this.state.vasen}\n          <button onClick={this.klikVasen}>vasen</button>\n          <button onClick={this.klikOikea}>oikea</button>\n          {this.state.oikea}\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n  MONIMUTKAISEMMAN TILAN PÄIVITTÄMINEN */\n\n/*      1.6 unicafe osa1    \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={() => this.setState({ hyvä: this.state.hyvä + 1 })}>\n          Hyvä\n        </button>\n        <button onClick={() => this.setState({ neutraali: this.state.neutraali + 1 })}>\n          Neutraali\n        </button>\n        <button onClick={() => this.setState({ huono: this.state.huono + 1 })}>\n          Huono\n        </button>\n        <div><h1>Statistiikka</h1></div>\n        <div>Hyvä {this.state.hyvä}</div>\n        <div>Neutraali {this.state.neutraali}</div>\n        <div>Huono {this.state.huono}</div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*    1.7 UNICAFE OSA2   \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0,\n      yhteensä: 0,\n    }\n  }\n\n  render() {\n\n    let positiivisia=0;\n    let keskiarvo =0;\n    \n    //console.log(isNaN (((this.state.hyvä)/this.state.yhteensä)*100))\n\n    if (isNaN (((this.state.hyvä)/this.state.yhteensä)*100)) {\n      positiivisia = <div>Positiivisia 0%</div> ;\n    } else {\n      positiivisia = <div>Positiivisia {((this.state.hyvä)/this.state.yhteensä)*100}%</div> ;\n    }\n\n    if (isNaN ((((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100))) {\n      keskiarvo = <div>Keskiarvo 0</div> ;\n    } else {\n      keskiarvo = <div>keskiarvo {(((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100)}</div> ;\n    }\n\n    return (\n      <div>\n        <div><h1>Anna palautetta</h1></div>\n        <button onClick={() => this.setState({ hyvä: this.state.hyvä + 1, yhteensä: this.state.yhteensä + 1 })}>\n          Hyvä\n        </button>\n        <button onClick={() => this.setState({ neutraali: this.state.neutraali + 1, yhteensä: this.state.yhteensä + 1 })}>\n          Neutraali\n        </button>\n        <button onClick={() => this.setState({ huono: this.state.huono + 1, yhteensä: this.state.yhteensä + 1 })}>\n          Huono\n        </button>\n        <div><h1>Statistiikka</h1></div>\n        <div>Hyvä {this.state.hyvä}</div>\n        <div>Neutraali {this.state.neutraali}</div>\n        <div>Huono {this.state.huono}</div>\n        <div>{keskiarvo}</div>\n        <div>{positiivisia}</div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*     1.8 UNICAFE OSA 3       \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0,\n      yhteensä: 0,\n    }\n  }\n\n  onkoNan(luku) {\n    let palautettava\n    if (isNaN(luku)) {\n      palautettava = 0\n    } else {\n      palautettava = luku\n    }\n    return palautettava\n  }\n\n  laskeKeskiarvo() {\n    let keskiarvo = (((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100)\n    return this.onkoNan(keskiarvo)\n  }\n\n  laskePositiiviset() {\n    let positiiviset = (((this.state.hyvä)/this.state.yhteensä)*100)\n    return this.onkoNan(positiiviset)\n  }\n\n  asetaArvoon = (arvo,arviointi) => () => this.setState({[arviointi]: arvo, yhteensä: this.state.yhteensä+1})\n\n  render() {\n    \n    return (\n      <div>\n        <div><h1>Anna palautetta</h1></div>\n        <Button\n          handleClick={this.asetaArvoon(this.state.hyvä + 1, \"hyvä\")}\n          text=\"Hyvä\"\n        />\n        <Button\n          handleClick={this.asetaArvoon(this.state.neutraali + 1, \"neutraali\")}\n          text=\"Neutraali\"\n        />\n        <Button\n          handleClick={this.asetaArvoon(this.state.huono + 1, \"huono\")}\n          text=\"Huono\"\n        />\n        <div><h1>Statistiikka</h1></div>\n          <Statistics hyviä={this.state.hyvä} neutraaleja={this.state.neutraali} huonoja={this.state.huono} positiiviset = {this.laskePositiiviset()}/>\n          <Statistic keskiarvo={this.laskeKeskiarvo()}/>\n        </div>\n    )\n  }\n}\n\n\nconst Button = ({ handleClick, text}) => (\n  <button onClick={handleClick}>\n  {console.log(handleClick)}\n    {text}\n  </button>\n)\n\nconst Statistic = ({ keskiarvo }) => {\n  return (\n    <div>Keskiarvo {keskiarvo}</div>\n  )\n}\n\nconst Statistics = ({ hyviä, neutraaleja, huonoja, positiiviset }) => {\n  return (\n    <div>\n      <div>Hyviä {hyviä}</div>\n      <div>Neutraaleja {neutraaleja}</div>\n      <div>Huonoja {huonoja}</div>\n      <div>Positiivisia {positiiviset}%</div>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*      UNICAFE 1.9 OSA 4 JA 1.10 OSA 5     \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0,\n      yhteensä: 0,\n    }\n  }\n\n  onkoPalautteita() {\n    let palautteita = false\n    if(this.state.yhteensä!=0){\n      palautteita = true\n    }\n    return palautteita\n  }\n\n  onkoNan(luku) {\n    let palautettava\n    if (isNaN(luku)) {\n      palautettava = 0\n    } else {\n      palautettava = luku\n    }\n    return palautettava\n  }\n\n  laskeKeskiarvo() {\n    let keskiarvo = (((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100)\n    return this.onkoNan(keskiarvo)\n  }\n\n  laskePositiiviset() {\n    let positiiviset = (((this.state.hyvä)/this.state.yhteensä)*100)\n    return this.onkoNan(positiiviset)\n  }\n\n  asetaArvoon = (arvo,arviointi) => () => this.setState({[arviointi]: arvo, yhteensä: this.state.yhteensä+1})\n\n  render() {\n    let arvo = 1\n    if(this.onkoPalautteita()){\n      return(\n        <div>\n          <div><h1>Anna palautetta</h1></div>\n          <Button\n            handleClick={this.asetaArvoon(this.state.hyvä + 1, \"hyvä\")}\n            text=\"Hyvä\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.neutraali + 1, \"neutraali\")}\n            text=\"Neutraali\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.huono + 1, \"huono\")}\n            text=\"Huono\"\n          />\n        \n          <div><h1>Statistiikka</h1></div>\n            <Statistics hyviä={this.state.hyvä} neutraaleja={this.state.neutraali} huonoja={this.state.huono} positiiviset = {this.laskePositiiviset()}/>\n            <Statistic keskiarvo={this.laskeKeskiarvo()}/>\n          </div>\n      ) \n    }else{\n      return (\n        <div>\n          <div><h1>Anna palautetta</h1></div>\n          <Button\n            handleClick={this.asetaArvoon(this.state.hyvä + 1, \"hyvä\")}\n            text=\"Hyvä\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.neutraali + 1, \"neutraali\")}\n            text=\"Neutraali\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.huono + 1, \"huono\")}\n            text=\"Huono\"\n          />\n        \n          <div><h1>Statistiikka</h1></div>\n            <p>ei yhtään palautetta annettu</p>\n          </div>\n      )\n    } //else\n  }\n}\n\n\nconst Button = ({ handleClick, text}) => (\n  <button onClick={handleClick}>\n  {console.log(handleClick)}\n    {text}\n  </button>\n)\n\nconst Statistic = ({ keskiarvo }) => {\n  return (\n    <div>Keskiarvo {keskiarvo}</div>\n  )\n}\n\nconst Statistics = ({ hyviä, neutraaleja, huonoja, positiiviset }) => {\n  return (\n    <div>\n      <div>Hyviä {hyviä}</div>\n      <div>Neutraaleja {neutraaleja}</div>\n      <div>Huonoja {huonoja}</div>\n      <div>Positiivisia {positiiviset}%</div>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*      1.11 UNICAFE OSA 6     \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0,\n      yhteensä: 0,\n    }\n  }\n\n  onkoPalautteita() {\n    let palautteita = false\n    if(this.state.yhteensä!=0){\n      palautteita = true\n    }\n    return palautteita\n  }\n\n  onkoNan(luku) {\n    let palautettava\n    if (isNaN(luku)) {\n      palautettava = 0\n    } else {\n      palautettava = luku\n    }\n    return palautettava\n  }\n\n  laskeKeskiarvo() {\n    let keskiarvo = (((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100)\n    return this.onkoNan(keskiarvo)\n  }\n\n  laskePositiiviset() {\n    let positiiviset = (((this.state.hyvä)/this.state.yhteensä)*100)\n    return this.onkoNan(positiiviset)\n  }\n\n  asetaArvoon = (arvo,arviointi) => () => this.setState({[arviointi]: arvo, yhteensä: this.state.yhteensä+1})\n\n  render() {\n    let arvo = 1\n    if(this.onkoPalautteita()){\n      return(\n        <div>\n          <div><h1>Anna palautetta</h1></div>\n          <Button\n            handleClick={this.asetaArvoon(this.state.hyvä + 1, \"hyvä\")}\n            text=\"Hyvä\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.neutraali + 1, \"neutraali\")}\n            text=\"Neutraali\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.huono + 1, \"huono\")}\n            text=\"Huono\"\n          />\n        \n          <div><h1>Statistiikka</h1></div>\n            <Statistics hyviä={this.state.hyvä} neutraaleja={this.state.neutraali} huonoja={this.state.huono} positiiviset = {this.laskePositiiviset()}/>\n            <Statistic keskiarvo={this.laskeKeskiarvo()}/>\n          </div>\n      ) \n    }else{\n      return (\n        <div>\n          <div><h1>Anna palautetta</h1></div>\n          <Button\n            handleClick={this.asetaArvoon(this.state.hyvä + 1, \"hyvä\")}\n            text=\"Hyvä\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.neutraali + 1, \"neutraali\")}\n            text=\"Neutraali\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.huono + 1, \"huono\")}\n            text=\"Huono\"\n          />\n        \n          <div><h1>Statistiikka</h1></div>\n            <p>ei yhtään palautetta annettu</p>\n          </div>\n      )\n    } //else\n  }\n}\n\n\nconst Button = ({ handleClick, text}) => (\n  <button onClick={handleClick}>\n  {console.log(handleClick)}\n    {text}\n  </button>\n)\n\nconst Statistic = ({ keskiarvo }) => {\n  return (\n    <div>\n      <table>\n        <tr>\n          <td>Keskiarvo {keskiarvo}</td>\n        </tr>\n      </table>\n    </div>\n  )\n}\n\nconst Statistics = ({ hyviä, neutraaleja, huonoja, positiiviset }) => {\n  return (\n    <div>\n      <table>\n        <tr>\n          <td>Hyviä {hyviä}</td>\n        </tr>\n        <tr>\n          <td>Neutraaleja {neutraaleja}</td>\n        </tr>\n        <tr>\n          <td>Huonoja {huonoja}</td>\n        </tr>\n        <tr>\n          <td>Positiivisia {positiiviset}%</td>\n        </tr>\n      </table>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*       1.12 ANEKDOOTIT OSA 1      */\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.arvoSatunnaisluku = function () {\n      return function () {\n        return _this.setState({\n          satunnaisluku: Math.floor(Math.random() * 6 + 0)\n        });\n      };\n    };\n\n    _this.state = {\n      selected: 0,\n      pisteet1: 0,\n      pisteet2: 0,\n      pisteet3: 0,\n      pisteet4: 0,\n      pisteet5: 0,\n      satunnaisluku: 0\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"_renderObject\",\n    value: function _renderObject() {\n      var satunnaisluku = this.state.satunnaisluku;\n      console.log(\"SATUNNAISLUKU:\", this.state.satunnaisluku);\n      console.log(\"ANEKDOOTIT\", anecdotes[{\n        satunnaisluku: satunnaisluku\n      }].name);\n      /*\n        for (let key in anecdotes) {\n          console.log(\"KULLI\",anecdotes[2].name);\n        }\n      \treturn Object.entries(anecdotes).map(([key, value], i) => {\n           console.log(Object.entries(anecdotes))\n      \treturn (\n      \t\t<div key={key}>\n      \t\t\tpisteet is: {value.pisteet} ;\n      \t\t\tname is: {value.name}\n      \t\t</div>\n      \t)\n        })\n        */\n    } //  arvoSatunnaisluku = () => () => this.setState({selected: Math.floor((Math.random() * 6) + 0)})\n\n  }, {\n    key: \"addVote\",\n\n    /*{\n      let satunnaisluku \n      satunnaisluku = (Math.floor((Math.random() * 6) + 0))\n      return satunnaisluku\n      console.log(satunnaisluku)\n    }\n    */\n    value: function addVote() {\n      /* let tapaus\n       switch(this.state.selected) {\n          case 0:\n             //this.setState({pisteet1: this.state.pisteet1+1})\n             tapaus = \"pisteet1\"\n             break;\n         case 1:\n             //this.setState({pisteet2: this.state.pisteet2+1})\n             tapaus = \"pisteet2\"\n             break;\n         case 2:\n             //this.setState({pisteet3: this.state.pisteet3+1})\n             tapaus = \"pisteet3\"\n             break;\n         case 3:\n             //this.setState({pisteet4: this.state.pisteet4+1})\n             tapaus = \"pisteet4\"\n             break;\n         case 4:\n             //this.setState({pisteet5: this.state.pisteet5+1})\n             tapaus = \"pisteet5\"\n             break;\n      }\n       this.setState({[tapaus]: this.state.selected})\n      */\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 792\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 793\n        },\n        __self: this\n      }, this.props.anecdotes[this.state.selected]), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 796\n        },\n        __self: this\n      }, React.createElement(VoteButton, {\n        handleClick: this.addVote(),\n        text: \"vote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 797\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 802\n        },\n        __self: this\n      }, React.createElement(Button, {\n        handleClick: this.arvoSatunnaisluku(),\n        text: \"next anecdote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 803\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 808\n        },\n        __self: this\n      }, this._renderObject()));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nvar anecdotes = {\n  1: {\n    pisteet: 0,\n    name: 'If it hurts, do it more often'\n  },\n  2: {\n    pisteet: 0,\n    name: 'Adding manpower to a late software project makes it later!'\n  },\n  3: {\n    pisteet: 0,\n    name: 'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.'\n  },\n  4: {\n    pisteet: 0,\n    name: 'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.'\n  },\n  5: {\n    pisteet: 0,\n    name: 'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'\n  }\n  /*\n  const anecdotes = [\n    'If it hurts, do it more often',\n    'Adding manpower to a late software project makes it later!',\n    'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',\n    'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',\n    'Premature optimization is the root of all evil.',\n    'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'\n  ]\n  */\n\n};\n\nvar Button = function Button(_ref) {\n  var handleClick = _ref.handleClick,\n      text = _ref.text;\n  return React.createElement(\"button\", {\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 852\n    },\n    __self: this\n  }, console.log(handleClick), text);\n};\n\nvar VoteButton = function VoteButton(_ref2) {\n  var handleClick = _ref2.handleClick,\n      text = _ref2.text;\n  return React.createElement(\"button\", {\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 859\n    },\n    __self: this\n  }, console.log(handleClick), text);\n};\n\nReactDOM.render(React.createElement(App, {\n  anecdotes: anecdotes,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 866\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/perttira/Dropbox/Sites/fullstack/osa1/src/index.js"],"names":["React","ReactDOM","App","props","arvoSatunnaisluku","setState","satunnaisluku","Math","floor","random","state","selected","pisteet1","pisteet2","pisteet3","pisteet4","pisteet5","console","log","anecdotes","name","addVote","_renderObject","Component","pisteet","Button","handleClick","text","VoteButton","render","document","getElementById"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n/*\n\nconst App = (props) => {\n  const {counter} = props\n  return (\n    <div>{counter.value}</div>\n  )\n}\n\nconst counter = {\n  value: 1\n}\n\nconst renderoi = () => {\n  ReactDOM.render(\n    <App counter={counter} />,\n    document.getElementById('root')\n  )\n}\n\nsetInterval(() => {\n  renderoi()\n  counter.value += 1;\n}, 1000)\n\n*/\n\n\n/*\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n\n//  React-komponenttien tilaa, eli muuttujaa this.state ei saa päivittää suoraan,\n//  tilan päivitys on tehtävä aina funktion setState avulla.\n//  Metodin kutsuminen päivittää tilan ja aiheuttaa komponentin uuden \n//  renderöinnin (ellei sitä ole estetty myöhemmin esiteltävällä tavalla). \n//  Uudelleenrenderöinnin yhteydessä myös kaikki komponentin sisältämät \n//  alikomponentit renderöidään.\n\n    setInterval(() => {\n      this.setState({ counter: this.state.counter + 1 })\n    }, 1000)\n  }\n  render() {\n    console.log('renderöidään', this.state.counter)\n    return (\n      <div>{this.state.counter}</div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/* TAPAHTUMANKÄSITTELIJÄ \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div>{this.state.counter}</div>\n        <button onClick={() => this.setState({ counter: this.state.counter + 1 })}>\n          plus\n        </button>\n        <button onClick={() => this.setState({ counter: 0 })}>\n          zero\n        </button>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*   METODIEN KÄYTTÖ JA THIS    \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n    this.kasvataYhdella = this.kasvataYhdella.bind(this)\n    this.nollaa = this.nollaa.bind(this)\n  }\n\n  kasvataYhdella() {\n    this.setState({ counter: this.state.counter + 1 })\n  }\n\n  nollaa() {\n    this.setState({ counter: 0 })\n  }\n\n  render() {\n    return (\n      <div>\n        <div>{this.state.counter}</div>\n        <div>\n        <button onClick={this.kasvataYhdella}>\n          plus\n        </button>\n        <button onClick={this.nollaa}>\n          zero\n        </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n\n*/\n\n\n/*   TILAN VIEMINEN ALIKOMPONENTTIIN   \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n  }\n\n  asetaArvoon = (arvo) => {\n    return () => {\n      this.setState({ counter: arvo })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Display counter={this.state.counter}/>\n        <div>\n          <Button\n            handleClick={this.asetaArvoon(this.state.counter + 1)}\n            text=\"Plus\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.counter - 1)}\n            text=\"Minus\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(0)}\n            text=\"Zero\"\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\n// Voidaan lyhentää muotoon: const Display = ({ counter }) => <div>{counter}</div>\nconst Display = (props) => {\n  return (\n    <div>{props.counter}</div>\n  )\n}\nconst Button = ({ handleClick, text }) => (\n  <button onClick={handleClick}>\n    {text}\n  </button>\n)\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*  MONIMUTKAISEMMAN TILAN PÄIVITTÄMINEN   \n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      vasen: 0,\n      oikea: 0\n    }\n  }\n\n  klikVasen = () => {\n    this.setState({\n      vasen: this.state.vasen + 1\n    })\n  }\n\n  klikOikea = () => {\n    this.setState({\n      oikea: this.state.oikea + 1\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          {this.state.vasen}\n          <button onClick={this.klikVasen}>vasen</button>\n          <button onClick={this.klikOikea}>oikea</button>\n          {this.state.oikea}\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n  MONIMUTKAISEMMAN TILAN PÄIVITTÄMINEN */\n\n/*      1.6 unicafe osa1    \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={() => this.setState({ hyvä: this.state.hyvä + 1 })}>\n          Hyvä\n        </button>\n        <button onClick={() => this.setState({ neutraali: this.state.neutraali + 1 })}>\n          Neutraali\n        </button>\n        <button onClick={() => this.setState({ huono: this.state.huono + 1 })}>\n          Huono\n        </button>\n        <div><h1>Statistiikka</h1></div>\n        <div>Hyvä {this.state.hyvä}</div>\n        <div>Neutraali {this.state.neutraali}</div>\n        <div>Huono {this.state.huono}</div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*    1.7 UNICAFE OSA2   \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0,\n      yhteensä: 0,\n    }\n  }\n\n  render() {\n\n    let positiivisia=0;\n    let keskiarvo =0;\n    \n    //console.log(isNaN (((this.state.hyvä)/this.state.yhteensä)*100))\n\n    if (isNaN (((this.state.hyvä)/this.state.yhteensä)*100)) {\n      positiivisia = <div>Positiivisia 0%</div> ;\n    } else {\n      positiivisia = <div>Positiivisia {((this.state.hyvä)/this.state.yhteensä)*100}%</div> ;\n    }\n\n    if (isNaN ((((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100))) {\n      keskiarvo = <div>Keskiarvo 0</div> ;\n    } else {\n      keskiarvo = <div>keskiarvo {(((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100)}</div> ;\n    }\n\n    return (\n      <div>\n        <div><h1>Anna palautetta</h1></div>\n        <button onClick={() => this.setState({ hyvä: this.state.hyvä + 1, yhteensä: this.state.yhteensä + 1 })}>\n          Hyvä\n        </button>\n        <button onClick={() => this.setState({ neutraali: this.state.neutraali + 1, yhteensä: this.state.yhteensä + 1 })}>\n          Neutraali\n        </button>\n        <button onClick={() => this.setState({ huono: this.state.huono + 1, yhteensä: this.state.yhteensä + 1 })}>\n          Huono\n        </button>\n        <div><h1>Statistiikka</h1></div>\n        <div>Hyvä {this.state.hyvä}</div>\n        <div>Neutraali {this.state.neutraali}</div>\n        <div>Huono {this.state.huono}</div>\n        <div>{keskiarvo}</div>\n        <div>{positiivisia}</div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*     1.8 UNICAFE OSA 3       \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0,\n      yhteensä: 0,\n    }\n  }\n\n  onkoNan(luku) {\n    let palautettava\n    if (isNaN(luku)) {\n      palautettava = 0\n    } else {\n      palautettava = luku\n    }\n    return palautettava\n  }\n\n  laskeKeskiarvo() {\n    let keskiarvo = (((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100)\n    return this.onkoNan(keskiarvo)\n  }\n\n  laskePositiiviset() {\n    let positiiviset = (((this.state.hyvä)/this.state.yhteensä)*100)\n    return this.onkoNan(positiiviset)\n  }\n\n  asetaArvoon = (arvo,arviointi) => () => this.setState({[arviointi]: arvo, yhteensä: this.state.yhteensä+1})\n\n  render() {\n    \n    return (\n      <div>\n        <div><h1>Anna palautetta</h1></div>\n        <Button\n          handleClick={this.asetaArvoon(this.state.hyvä + 1, \"hyvä\")}\n          text=\"Hyvä\"\n        />\n        <Button\n          handleClick={this.asetaArvoon(this.state.neutraali + 1, \"neutraali\")}\n          text=\"Neutraali\"\n        />\n        <Button\n          handleClick={this.asetaArvoon(this.state.huono + 1, \"huono\")}\n          text=\"Huono\"\n        />\n        <div><h1>Statistiikka</h1></div>\n          <Statistics hyviä={this.state.hyvä} neutraaleja={this.state.neutraali} huonoja={this.state.huono} positiiviset = {this.laskePositiiviset()}/>\n          <Statistic keskiarvo={this.laskeKeskiarvo()}/>\n        </div>\n    )\n  }\n}\n\n\nconst Button = ({ handleClick, text}) => (\n  <button onClick={handleClick}>\n  {console.log(handleClick)}\n    {text}\n  </button>\n)\n\nconst Statistic = ({ keskiarvo }) => {\n  return (\n    <div>Keskiarvo {keskiarvo}</div>\n  )\n}\n\nconst Statistics = ({ hyviä, neutraaleja, huonoja, positiiviset }) => {\n  return (\n    <div>\n      <div>Hyviä {hyviä}</div>\n      <div>Neutraaleja {neutraaleja}</div>\n      <div>Huonoja {huonoja}</div>\n      <div>Positiivisia {positiiviset}%</div>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*      UNICAFE 1.9 OSA 4 JA 1.10 OSA 5     \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0,\n      yhteensä: 0,\n    }\n  }\n\n  onkoPalautteita() {\n    let palautteita = false\n    if(this.state.yhteensä!=0){\n      palautteita = true\n    }\n    return palautteita\n  }\n\n  onkoNan(luku) {\n    let palautettava\n    if (isNaN(luku)) {\n      palautettava = 0\n    } else {\n      palautettava = luku\n    }\n    return palautettava\n  }\n\n  laskeKeskiarvo() {\n    let keskiarvo = (((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100)\n    return this.onkoNan(keskiarvo)\n  }\n\n  laskePositiiviset() {\n    let positiiviset = (((this.state.hyvä)/this.state.yhteensä)*100)\n    return this.onkoNan(positiiviset)\n  }\n\n  asetaArvoon = (arvo,arviointi) => () => this.setState({[arviointi]: arvo, yhteensä: this.state.yhteensä+1})\n\n  render() {\n    let arvo = 1\n    if(this.onkoPalautteita()){\n      return(\n        <div>\n          <div><h1>Anna palautetta</h1></div>\n          <Button\n            handleClick={this.asetaArvoon(this.state.hyvä + 1, \"hyvä\")}\n            text=\"Hyvä\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.neutraali + 1, \"neutraali\")}\n            text=\"Neutraali\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.huono + 1, \"huono\")}\n            text=\"Huono\"\n          />\n        \n          <div><h1>Statistiikka</h1></div>\n            <Statistics hyviä={this.state.hyvä} neutraaleja={this.state.neutraali} huonoja={this.state.huono} positiiviset = {this.laskePositiiviset()}/>\n            <Statistic keskiarvo={this.laskeKeskiarvo()}/>\n          </div>\n      ) \n    }else{\n      return (\n        <div>\n          <div><h1>Anna palautetta</h1></div>\n          <Button\n            handleClick={this.asetaArvoon(this.state.hyvä + 1, \"hyvä\")}\n            text=\"Hyvä\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.neutraali + 1, \"neutraali\")}\n            text=\"Neutraali\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.huono + 1, \"huono\")}\n            text=\"Huono\"\n          />\n        \n          <div><h1>Statistiikka</h1></div>\n            <p>ei yhtään palautetta annettu</p>\n          </div>\n      )\n    } //else\n  }\n}\n\n\nconst Button = ({ handleClick, text}) => (\n  <button onClick={handleClick}>\n  {console.log(handleClick)}\n    {text}\n  </button>\n)\n\nconst Statistic = ({ keskiarvo }) => {\n  return (\n    <div>Keskiarvo {keskiarvo}</div>\n  )\n}\n\nconst Statistics = ({ hyviä, neutraaleja, huonoja, positiiviset }) => {\n  return (\n    <div>\n      <div>Hyviä {hyviä}</div>\n      <div>Neutraaleja {neutraaleja}</div>\n      <div>Huonoja {huonoja}</div>\n      <div>Positiivisia {positiiviset}%</div>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*      1.11 UNICAFE OSA 6     \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0,\n      yhteensä: 0,\n    }\n  }\n\n  onkoPalautteita() {\n    let palautteita = false\n    if(this.state.yhteensä!=0){\n      palautteita = true\n    }\n    return palautteita\n  }\n\n  onkoNan(luku) {\n    let palautettava\n    if (isNaN(luku)) {\n      palautettava = 0\n    } else {\n      palautettava = luku\n    }\n    return palautettava\n  }\n\n  laskeKeskiarvo() {\n    let keskiarvo = (((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100)\n    return this.onkoNan(keskiarvo)\n  }\n\n  laskePositiiviset() {\n    let positiiviset = (((this.state.hyvä)/this.state.yhteensä)*100)\n    return this.onkoNan(positiiviset)\n  }\n\n  asetaArvoon = (arvo,arviointi) => () => this.setState({[arviointi]: arvo, yhteensä: this.state.yhteensä+1})\n\n  render() {\n    let arvo = 1\n    if(this.onkoPalautteita()){\n      return(\n        <div>\n          <div><h1>Anna palautetta</h1></div>\n          <Button\n            handleClick={this.asetaArvoon(this.state.hyvä + 1, \"hyvä\")}\n            text=\"Hyvä\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.neutraali + 1, \"neutraali\")}\n            text=\"Neutraali\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.huono + 1, \"huono\")}\n            text=\"Huono\"\n          />\n        \n          <div><h1>Statistiikka</h1></div>\n            <Statistics hyviä={this.state.hyvä} neutraaleja={this.state.neutraali} huonoja={this.state.huono} positiiviset = {this.laskePositiiviset()}/>\n            <Statistic keskiarvo={this.laskeKeskiarvo()}/>\n          </div>\n      ) \n    }else{\n      return (\n        <div>\n          <div><h1>Anna palautetta</h1></div>\n          <Button\n            handleClick={this.asetaArvoon(this.state.hyvä + 1, \"hyvä\")}\n            text=\"Hyvä\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.neutraali + 1, \"neutraali\")}\n            text=\"Neutraali\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.huono + 1, \"huono\")}\n            text=\"Huono\"\n          />\n        \n          <div><h1>Statistiikka</h1></div>\n            <p>ei yhtään palautetta annettu</p>\n          </div>\n      )\n    } //else\n  }\n}\n\n\nconst Button = ({ handleClick, text}) => (\n  <button onClick={handleClick}>\n  {console.log(handleClick)}\n    {text}\n  </button>\n)\n\nconst Statistic = ({ keskiarvo }) => {\n  return (\n    <div>\n      <table>\n        <tr>\n          <td>Keskiarvo {keskiarvo}</td>\n        </tr>\n      </table>\n    </div>\n  )\n}\n\nconst Statistics = ({ hyviä, neutraaleja, huonoja, positiiviset }) => {\n  return (\n    <div>\n      <table>\n        <tr>\n          <td>Hyviä {hyviä}</td>\n        </tr>\n        <tr>\n          <td>Neutraaleja {neutraaleja}</td>\n        </tr>\n        <tr>\n          <td>Huonoja {huonoja}</td>\n        </tr>\n        <tr>\n          <td>Positiivisia {positiiviset}%</td>\n        </tr>\n      </table>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/   \n\n/*       1.12 ANEKDOOTIT OSA 1      */\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n       selected: 0,\n       pisteet1: 0,\n       pisteet2: 0,\n       pisteet3: 0,\n       pisteet4: 0,\n       pisteet5: 0,\n       satunnaisluku: 0,\n\n      }\n  }\n\n  _renderObject(){\n    let satunnaisluku = this.state.satunnaisluku\n    console.log(\"SATUNNAISLUKU:\", this.state.satunnaisluku)\n\n    console.log(\"ANEKDOOTIT\", anecdotes[{satunnaisluku}].name)\n\n  /*\n    for (let key in anecdotes) {\n      console.log(\"KULLI\",anecdotes[2].name);\n    }\n\n\t\treturn Object.entries(anecdotes).map(([key, value], i) => {\n\n      console.log(Object.entries(anecdotes))\n\t\t\treturn (\n\t\t\t\t<div key={key}>\n\t\t\t\t\tpisteet is: {value.pisteet} ;\n\t\t\t\t\tname is: {value.name}\n\t\t\t\t</div>\n\t\t\t)\n    })\n    */\n\t}\n\n\n//  arvoSatunnaisluku = () => () => this.setState({selected: Math.floor((Math.random() * 6) + 0)})\n\n  arvoSatunnaisluku = () => () => this.setState({satunnaisluku: Math.floor((Math.random() * 6) + 0)})\n  \n  /*{\n    let satunnaisluku \n    satunnaisluku = (Math.floor((Math.random() * 6) + 0))\n    return satunnaisluku\n    console.log(satunnaisluku)\n  }\n  */\n\n  addVote() {\n\n   /* let tapaus\n    switch(this.state.selected) {\n\n      case 0:\n          //this.setState({pisteet1: this.state.pisteet1+1})\n          tapaus = \"pisteet1\"\n          break;\n      case 1:\n          //this.setState({pisteet2: this.state.pisteet2+1})\n          tapaus = \"pisteet2\"\n          break;\n      case 2:\n          //this.setState({pisteet3: this.state.pisteet3+1})\n          tapaus = \"pisteet3\"\n          break;\n      case 3:\n          //this.setState({pisteet4: this.state.pisteet4+1})\n          tapaus = \"pisteet4\"\n          break;\n      case 4:\n          //this.setState({pisteet5: this.state.pisteet5+1})\n          tapaus = \"pisteet5\"\n          break;\n  }\n    this.setState({[tapaus]: this.state.selected})\n*/\n\n  }\n  render() {\n    return (\n      <div>\n        <div>\n          {this.props.anecdotes[this.state.selected]}\n        </div>\n        <span>\n          <VoteButton\n            handleClick={this.addVote()}\n            text=\"vote\" \n          />\n        </span>\n        <span>\n          <Button\n            handleClick={this.arvoSatunnaisluku()}\n            text=\"next anecdote\"\n          />\n        </span>\n        <div>\n\t\t\t\t  {this._renderObject()}\n\t\t\t  </div>\n      </div>\n    )\n  }\n}\n\nconst anecdotes = {\n  1: {\n      pisteet: 0,\n      name:'If it hurts, do it more often'\n  },\n  2: {\n      pisteet: 0,\n      name:'Adding manpower to a late software project makes it later!'\n  },\n  3: {\n    pisteet: 0,\n    name:'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.'\n  },\n  4: {\n  pisteet: 0,\n  name:'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.'\n  },\n  5: {\n  pisteet: 0,\n  name:'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'\n  }\n}\n\n\n/*\nconst anecdotes = [\n  'If it hurts, do it more often',\n  'Adding manpower to a late software project makes it later!',\n  'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',\n  'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',\n  'Premature optimization is the root of all evil.',\n  'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'\n]\n*/\n\nconst Button = ({ handleClick, text}) => (\n  <button onClick={handleClick}>\n  {console.log(handleClick)}\n    {text}\n  </button>\n)\n\nconst VoteButton = ({ handleClick, text}) => (\n  <button onClick={handleClick}>\n  {console.log(handleClick)}\n    {text}\n  </button>\n)\n\nReactDOM.render(\n  <App anecdotes={anecdotes} />,\n  document.getElementById('root')\n)"]},"metadata":{},"sourceType":"module"}