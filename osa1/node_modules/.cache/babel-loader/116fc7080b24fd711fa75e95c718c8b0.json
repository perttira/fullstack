{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\n/*\n\nconst App = (props) => {\n  const {counter} = props\n  return (\n    <div>{counter.value}</div>\n  )\n}\n\nconst counter = {\n  value: 1\n}\n\nconst renderoi = () => {\n  ReactDOM.render(\n    <App counter={counter} />,\n    document.getElementById('root')\n  )\n}\n\nsetInterval(() => {\n  renderoi()\n  counter.value += 1;\n}, 1000)\n\n*/\n\n/*\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n\n//  React-komponenttien tilaa, eli muuttujaa this.state ei saa päivittää suoraan,\n//  tilan päivitys on tehtävä aina funktion setState avulla.\n//  Metodin kutsuminen päivittää tilan ja aiheuttaa komponentin uuden \n//  renderöinnin (ellei sitä ole estetty myöhemmin esiteltävällä tavalla). \n//  Uudelleenrenderöinnin yhteydessä myös kaikki komponentin sisältämät \n//  alikomponentit renderöidään.\n\n    setInterval(() => {\n      this.setState({ counter: this.state.counter + 1 })\n    }, 1000)\n  }\n  render() {\n    console.log('renderöidään', this.state.counter)\n    return (\n      <div>{this.state.counter}</div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/* TAPAHTUMANKÄSITTELIJÄ \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div>{this.state.counter}</div>\n        <button onClick={() => this.setState({ counter: this.state.counter + 1 })}>\n          plus\n        </button>\n        <button onClick={() => this.setState({ counter: 0 })}>\n          zero\n        </button>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*   METODIEN KÄYTTÖ JA THIS    \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n    this.kasvataYhdella = this.kasvataYhdella.bind(this)\n    this.nollaa = this.nollaa.bind(this)\n  }\n\n  kasvataYhdella() {\n    this.setState({ counter: this.state.counter + 1 })\n  }\n\n  nollaa() {\n    this.setState({ counter: 0 })\n  }\n\n  render() {\n    return (\n      <div>\n        <div>{this.state.counter}</div>\n        <div>\n        <button onClick={this.kasvataYhdella}>\n          plus\n        </button>\n        <button onClick={this.nollaa}>\n          zero\n        </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n\n*/\n\n/*   TILAN VIEMINEN ALIKOMPONENTTIIN   \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n  }\n\n  asetaArvoon = (arvo) => {\n    return () => {\n      this.setState({ counter: arvo })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Display counter={this.state.counter}/>\n        <div>\n          <Button\n            handleClick={this.asetaArvoon(this.state.counter + 1)}\n            text=\"Plus\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.counter - 1)}\n            text=\"Minus\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(0)}\n            text=\"Zero\"\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\n// Voidaan lyhentää muotoon: const Display = ({ counter }) => <div>{counter}</div>\nconst Display = (props) => {\n  return (\n    <div>{props.counter}</div>\n  )\n}\nconst Button = ({ handleClick, text }) => (\n  <button onClick={handleClick}>\n    {text}\n  </button>\n)\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*  MONIMUTKAISEMMAN TILAN PÄIVITTÄMINEN   \n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      vasen: 0,\n      oikea: 0\n    }\n  }\n\n  klikVasen = () => {\n    this.setState({\n      vasen: this.state.vasen + 1\n    })\n  }\n\n  klikOikea = () => {\n    this.setState({\n      oikea: this.state.oikea + 1\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          {this.state.vasen}\n          <button onClick={this.klikVasen}>vasen</button>\n          <button onClick={this.klikOikea}>oikea</button>\n          {this.state.oikea}\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n  MONIMUTKAISEMMAN TILAN PÄIVITTÄMINEN */\n\n/*      1.6 unicafe osa1    \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={() => this.setState({ hyvä: this.state.hyvä + 1 })}>\n          Hyvä\n        </button>\n        <button onClick={() => this.setState({ neutraali: this.state.neutraali + 1 })}>\n          Neutraali\n        </button>\n        <button onClick={() => this.setState({ huono: this.state.huono + 1 })}>\n          Huono\n        </button>\n        <div><h1>Statistiikka</h1></div>\n        <div>Hyvä {this.state.hyvä}</div>\n        <div>Neutraali {this.state.neutraali}</div>\n        <div>Huono {this.state.huono}</div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*    1.7 UNICAFE OSA2   \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0,\n      yhteensä: 0,\n    }\n  }\n\n  render() {\n\n    let positiivisia=0;\n    let keskiarvo =0;\n    \n    //console.log(isNaN (((this.state.hyvä)/this.state.yhteensä)*100))\n\n    if (isNaN (((this.state.hyvä)/this.state.yhteensä)*100)) {\n      positiivisia = <div>Positiivisia 0%</div> ;\n    } else {\n      positiivisia = <div>Positiivisia {((this.state.hyvä)/this.state.yhteensä)*100}%</div> ;\n    }\n\n    if (isNaN ((((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100))) {\n      keskiarvo = <div>Keskiarvo 0</div> ;\n    } else {\n      keskiarvo = <div>keskiarvo {(((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100)}</div> ;\n    }\n\n    //console.log(-Math.abs(this.state.huono))\n\n    return (\n      <div>\n        <div><h1>Anna palautetta</h1></div>\n        <button onClick={() => this.setState({ hyvä: this.state.hyvä + 1, yhteensä: this.state.yhteensä + 1 })}>\n          Hyvä\n        </button>\n        <button onClick={() => this.setState({ neutraali: this.state.neutraali + 1, yhteensä: this.state.yhteensä + 1 })}>\n          Neutraali\n        </button>\n        <button onClick={() => this.setState({ huono: this.state.huono + 1, yhteensä: this.state.yhteensä + 1 })}>\n          Huono\n        </button>\n        <div><h1>Statistiikka</h1></div>\n        <div>Hyvä {this.state.hyvä}</div>\n        <div>Neutraali {this.state.neutraali}</div>\n        <div>Huono {this.state.huono}</div>\n        <div>{keskiarvo}</div>\n        <div>{positiivisia}</div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*     1.8 UNICAFE OSA 3       \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0,\n      yhteensä: 0,\n    }\n  }\n\n  onkoNan(luku) {\n    let palautettava\n    if (isNaN(luku)) {\n      palautettava = 0\n    } else {\n      palautettava = luku\n    }\n    return palautettava\n  }\n\n  laskeKeskiarvo() {\n    let keskiarvo = (((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100)\n    return this.onkoNan(keskiarvo)\n  }\n\n  laskePositiiviset() {\n    let positiiviset = (((this.state.hyvä)/this.state.yhteensä)*100)\n    return this.onkoNan(positiiviset)\n  }\n\n  asetaArvoon = (arvo,arviointi) => () => this.setState({[arviointi]: arvo, yhteensä: this.state.yhteensä+1})\n\n  render() {\n    \n    return (\n      <div>\n        <div><h1>Anna palautetta</h1></div>\n        <Button\n          handleClick={this.asetaArvoon(this.state.hyvä + 1, \"hyvä\")}\n          text=\"Hyvä\"\n        />\n        <Button\n          handleClick={this.asetaArvoon(this.state.neutraali + 1, \"neutraali\")}\n          text=\"Neutraali\"\n        />\n        <Button\n          handleClick={this.asetaArvoon(this.state.huono + 1, \"huono\")}\n          text=\"Huono\"\n        />\n        <div><h1>Statistiikka</h1></div>\n          <Statistics hyviä={this.state.hyvä} neutraaleja={this.state.neutraali} huonoja={this.state.huono} positiiviset = {this.laskePositiiviset()}/>\n          <Statistic keskiarvo={this.laskeKeskiarvo()}/>\n        </div>\n    )\n  }\n}\n\n\nconst Button = ({ handleClick, text}) => (\n  <button onClick={handleClick}>\n  {console.log(handleClick)}\n    {text}\n  </button>\n)\n\nconst Statistic = ({ keskiarvo }) => {\n  return (\n    <div>Keskiarvo {keskiarvo}</div>\n  )\n}\n\nconst Statistics = ({ hyviä, neutraaleja, huonoja, positiiviset }) => {\n  return (\n    <div>\n      <div>Hyviä {hyviä}</div>\n      <div>Neutraaleja {neutraaleja}</div>\n      <div>Huonoja {huonoja}</div>\n      <div>Positiivisia {positiiviset}%</div>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*      UNICAFE OSA 4       */","map":{"version":3,"sources":["/Users/perttira/Dropbox/Sites/fullstack/osa1/src/index.js"],"names":["React","ReactDOM"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA","sourcesContent":["\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n/*\n\nconst App = (props) => {\n  const {counter} = props\n  return (\n    <div>{counter.value}</div>\n  )\n}\n\nconst counter = {\n  value: 1\n}\n\nconst renderoi = () => {\n  ReactDOM.render(\n    <App counter={counter} />,\n    document.getElementById('root')\n  )\n}\n\nsetInterval(() => {\n  renderoi()\n  counter.value += 1;\n}, 1000)\n\n*/\n\n\n/*\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n\n//  React-komponenttien tilaa, eli muuttujaa this.state ei saa päivittää suoraan,\n//  tilan päivitys on tehtävä aina funktion setState avulla.\n//  Metodin kutsuminen päivittää tilan ja aiheuttaa komponentin uuden \n//  renderöinnin (ellei sitä ole estetty myöhemmin esiteltävällä tavalla). \n//  Uudelleenrenderöinnin yhteydessä myös kaikki komponentin sisältämät \n//  alikomponentit renderöidään.\n\n    setInterval(() => {\n      this.setState({ counter: this.state.counter + 1 })\n    }, 1000)\n  }\n  render() {\n    console.log('renderöidään', this.state.counter)\n    return (\n      <div>{this.state.counter}</div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/* TAPAHTUMANKÄSITTELIJÄ \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div>{this.state.counter}</div>\n        <button onClick={() => this.setState({ counter: this.state.counter + 1 })}>\n          plus\n        </button>\n        <button onClick={() => this.setState({ counter: 0 })}>\n          zero\n        </button>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*   METODIEN KÄYTTÖ JA THIS    \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n    this.kasvataYhdella = this.kasvataYhdella.bind(this)\n    this.nollaa = this.nollaa.bind(this)\n  }\n\n  kasvataYhdella() {\n    this.setState({ counter: this.state.counter + 1 })\n  }\n\n  nollaa() {\n    this.setState({ counter: 0 })\n  }\n\n  render() {\n    return (\n      <div>\n        <div>{this.state.counter}</div>\n        <div>\n        <button onClick={this.kasvataYhdella}>\n          plus\n        </button>\n        <button onClick={this.nollaa}>\n          zero\n        </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n\n*/\n\n\n/*   TILAN VIEMINEN ALIKOMPONENTTIIN   \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      counter: 1\n    }\n  }\n\n  asetaArvoon = (arvo) => {\n    return () => {\n      this.setState({ counter: arvo })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Display counter={this.state.counter}/>\n        <div>\n          <Button\n            handleClick={this.asetaArvoon(this.state.counter + 1)}\n            text=\"Plus\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(this.state.counter - 1)}\n            text=\"Minus\"\n          />\n          <Button\n            handleClick={this.asetaArvoon(0)}\n            text=\"Zero\"\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\n// Voidaan lyhentää muotoon: const Display = ({ counter }) => <div>{counter}</div>\nconst Display = (props) => {\n  return (\n    <div>{props.counter}</div>\n  )\n}\nconst Button = ({ handleClick, text }) => (\n  <button onClick={handleClick}>\n    {text}\n  </button>\n)\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*  MONIMUTKAISEMMAN TILAN PÄIVITTÄMINEN   \n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      vasen: 0,\n      oikea: 0\n    }\n  }\n\n  klikVasen = () => {\n    this.setState({\n      vasen: this.state.vasen + 1\n    })\n  }\n\n  klikOikea = () => {\n    this.setState({\n      oikea: this.state.oikea + 1\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          {this.state.vasen}\n          <button onClick={this.klikVasen}>vasen</button>\n          <button onClick={this.klikOikea}>oikea</button>\n          {this.state.oikea}\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n  MONIMUTKAISEMMAN TILAN PÄIVITTÄMINEN */\n\n/*      1.6 unicafe osa1    \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={() => this.setState({ hyvä: this.state.hyvä + 1 })}>\n          Hyvä\n        </button>\n        <button onClick={() => this.setState({ neutraali: this.state.neutraali + 1 })}>\n          Neutraali\n        </button>\n        <button onClick={() => this.setState({ huono: this.state.huono + 1 })}>\n          Huono\n        </button>\n        <div><h1>Statistiikka</h1></div>\n        <div>Hyvä {this.state.hyvä}</div>\n        <div>Neutraali {this.state.neutraali}</div>\n        <div>Huono {this.state.huono}</div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*    1.7 UNICAFE OSA2   \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0,\n      yhteensä: 0,\n    }\n  }\n\n  render() {\n\n    let positiivisia=0;\n    let keskiarvo =0;\n    \n    //console.log(isNaN (((this.state.hyvä)/this.state.yhteensä)*100))\n\n    if (isNaN (((this.state.hyvä)/this.state.yhteensä)*100)) {\n      positiivisia = <div>Positiivisia 0%</div> ;\n    } else {\n      positiivisia = <div>Positiivisia {((this.state.hyvä)/this.state.yhteensä)*100}%</div> ;\n    }\n\n    if (isNaN ((((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100))) {\n      keskiarvo = <div>Keskiarvo 0</div> ;\n    } else {\n      keskiarvo = <div>keskiarvo {(((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100)}</div> ;\n    }\n\n    //console.log(-Math.abs(this.state.huono))\n\n    return (\n      <div>\n        <div><h1>Anna palautetta</h1></div>\n        <button onClick={() => this.setState({ hyvä: this.state.hyvä + 1, yhteensä: this.state.yhteensä + 1 })}>\n          Hyvä\n        </button>\n        <button onClick={() => this.setState({ neutraali: this.state.neutraali + 1, yhteensä: this.state.yhteensä + 1 })}>\n          Neutraali\n        </button>\n        <button onClick={() => this.setState({ huono: this.state.huono + 1, yhteensä: this.state.yhteensä + 1 })}>\n          Huono\n        </button>\n        <div><h1>Statistiikka</h1></div>\n        <div>Hyvä {this.state.hyvä}</div>\n        <div>Neutraali {this.state.neutraali}</div>\n        <div>Huono {this.state.huono}</div>\n        <div>{keskiarvo}</div>\n        <div>{positiivisia}</div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*     1.8 UNICAFE OSA 3       \n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      hyvä: 0,\n      neutraali: 0,\n      huono: 0,\n      yhteensä: 0,\n    }\n  }\n\n  onkoNan(luku) {\n    let palautettava\n    if (isNaN(luku)) {\n      palautettava = 0\n    } else {\n      palautettava = luku\n    }\n    return palautettava\n  }\n\n  laskeKeskiarvo() {\n    let keskiarvo = (((this.state.hyvä + (-Math.abs(this.state.huono)))/this.state.yhteensä)*100)\n    return this.onkoNan(keskiarvo)\n  }\n\n  laskePositiiviset() {\n    let positiiviset = (((this.state.hyvä)/this.state.yhteensä)*100)\n    return this.onkoNan(positiiviset)\n  }\n\n  asetaArvoon = (arvo,arviointi) => () => this.setState({[arviointi]: arvo, yhteensä: this.state.yhteensä+1})\n\n  render() {\n    \n    return (\n      <div>\n        <div><h1>Anna palautetta</h1></div>\n        <Button\n          handleClick={this.asetaArvoon(this.state.hyvä + 1, \"hyvä\")}\n          text=\"Hyvä\"\n        />\n        <Button\n          handleClick={this.asetaArvoon(this.state.neutraali + 1, \"neutraali\")}\n          text=\"Neutraali\"\n        />\n        <Button\n          handleClick={this.asetaArvoon(this.state.huono + 1, \"huono\")}\n          text=\"Huono\"\n        />\n        <div><h1>Statistiikka</h1></div>\n          <Statistics hyviä={this.state.hyvä} neutraaleja={this.state.neutraali} huonoja={this.state.huono} positiiviset = {this.laskePositiiviset()}/>\n          <Statistic keskiarvo={this.laskeKeskiarvo()}/>\n        </div>\n    )\n  }\n}\n\n\nconst Button = ({ handleClick, text}) => (\n  <button onClick={handleClick}>\n  {console.log(handleClick)}\n    {text}\n  </button>\n)\n\nconst Statistic = ({ keskiarvo }) => {\n  return (\n    <div>Keskiarvo {keskiarvo}</div>\n  )\n}\n\nconst Statistics = ({ hyviä, neutraaleja, huonoja, positiiviset }) => {\n  return (\n    <div>\n      <div>Hyviä {hyviä}</div>\n      <div>Neutraaleja {neutraaleja}</div>\n      <div>Huonoja {huonoja}</div>\n      <div>Positiivisia {positiiviset}%</div>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n*/\n\n/*      UNICAFE OSA 4       */"]},"metadata":{},"sourceType":"module"}